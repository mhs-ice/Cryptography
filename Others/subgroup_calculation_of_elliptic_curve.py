p = 17
a = 2
b = 2
G = (5,1)

def modinv(k, p):
    return pow(k, -1, p)  

def ec_add(P, Q):
    if P == 'O': return Q
    if Q == 'O': return P

    x1, y1 = P
    x2, y2 = Q

    if x1 == x2 and (y1 != y2 or y1 == 0):
        return 'O'

    if P != Q:
        # λ = (y2 - y1) / (x2 - x1) mod p
        lmbd = ((y2 - y1) * modinv(x2 - x1, p)) % p
    else:
        # Point doubling: λ = (3x1² + a) / (2y1) mod p
        lmbd = ((3 * x1 * x1 + a) * modinv(2 * y1, p)) % p

    x3 = (lmbd * lmbd - x1 - x2) % p
    y3 = (lmbd * (x1 - x3) - y1) % p

    return (x3, y3)

def generate_subgroup(G):
    subgroup = []
    P = G
    i = 1
    while P != 'O':
        subgroup.append((i, P))
        P = ec_add(P, G)
        i += 1
    subgroup.append((i, 'O')) 
    return subgroup

subgroup = generate_subgroup(G)
print("Subgroup ⟨G⟩ generated by G :\n")
for i, P in subgroup:
    print(f"{i}G = {P}")
